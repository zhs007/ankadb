// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ankadb.proto

package ankadbpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SnapshotMgr struct {
	MaxSnapshotID        int64    `protobuf:"varint,1,opt,name=maxSnapshotID,proto3" json:"maxSnapshotID,omitempty"`
	Snapshots            []int64  `protobuf:"varint,2,rep,packed,name=snapshots,proto3" json:"snapshots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotMgr) Reset()         { *m = SnapshotMgr{} }
func (m *SnapshotMgr) String() string { return proto.CompactTextString(m) }
func (*SnapshotMgr) ProtoMessage()    {}
func (*SnapshotMgr) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_e02e853ebaa9a730, []int{0}
}
func (m *SnapshotMgr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotMgr.Unmarshal(m, b)
}
func (m *SnapshotMgr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotMgr.Marshal(b, m, deterministic)
}
func (dst *SnapshotMgr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotMgr.Merge(dst, src)
}
func (m *SnapshotMgr) XXX_Size() int {
	return xxx_messageInfo_SnapshotMgr.Size(m)
}
func (m *SnapshotMgr) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotMgr.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotMgr proto.InternalMessageInfo

func (m *SnapshotMgr) GetMaxSnapshotID() int64 {
	if m != nil {
		return m.MaxSnapshotID
	}
	return 0
}

func (m *SnapshotMgr) GetSnapshots() []int64 {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

type Snapshot struct {
	SnapshotID           int64    `protobuf:"varint,1,opt,name=snapshotID,proto3" json:"snapshotID,omitempty"`
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	CreateTime           int64    `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_e02e853ebaa9a730, []int{1}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Snapshot.Unmarshal(m, b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
}
func (dst *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(dst, src)
}
func (m *Snapshot) XXX_Size() int {
	return xxx_messageInfo_Snapshot.Size(m)
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetSnapshotID() int64 {
	if m != nil {
		return m.SnapshotID
	}
	return 0
}

func (m *Snapshot) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *Snapshot) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

// graphQL请求
// graphQL query
type Query struct {
	QueryData string `protobuf:"bytes,1,opt,name=queryData,proto3" json:"queryData,omitempty"`
	VarData   string `protobuf:"bytes,2,opt,name=varData,proto3" json:"varData,omitempty"`
	// 如果queryTemplateName不为空，表示会更新queryTemplate
	// 注意，queryTemplateName要唯一
	// 也可以只给queryTemplateName，不给queryData
	// 如果同时给queryData和queryTemplateName，效率会低于只传queryTemplateName
	// If the queryTemplateName is not empty, it means that the queryTemplate will be updated.
	// Note the queryTemplateName is unique
	// can also only give queryTemplateName, not to queryData
	// If you give queryData and queryTemplateName at the same time,
	// the efficiency will be lower than only the queryTemplateName
	QueryTemplateName    string   `protobuf:"bytes,3,opt,name=queryTemplateName,proto3" json:"queryTemplateName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_e02e853ebaa9a730, []int{2}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (dst *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(dst, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetQueryData() string {
	if m != nil {
		return m.QueryData
	}
	return ""
}

func (m *Query) GetVarData() string {
	if m != nil {
		return m.VarData
	}
	return ""
}

func (m *Query) GetQueryTemplateName() string {
	if m != nil {
		return m.QueryTemplateName
	}
	return ""
}

// graphQL请求的返回
// reply of graphQL query
type ReplyQuery struct {
	Err                  string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyQuery) Reset()         { *m = ReplyQuery{} }
func (m *ReplyQuery) String() string { return proto.CompactTextString(m) }
func (*ReplyQuery) ProtoMessage()    {}
func (*ReplyQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_e02e853ebaa9a730, []int{3}
}
func (m *ReplyQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyQuery.Unmarshal(m, b)
}
func (m *ReplyQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyQuery.Marshal(b, m, deterministic)
}
func (dst *ReplyQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyQuery.Merge(dst, src)
}
func (m *ReplyQuery) XXX_Size() int {
	return xxx_messageInfo_ReplyQuery.Size(m)
}
func (m *ReplyQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyQuery proto.InternalMessageInfo

func (m *ReplyQuery) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *ReplyQuery) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

// 设置graphQL请求模板
// set graphQL query template
type QueryTemplate struct {
	// 注意，queryTemplateName要唯一
	// Note the queryTemplateName is unique
	QueryTemplateName    string   `protobuf:"bytes,1,opt,name=queryTemplateName,proto3" json:"queryTemplateName,omitempty"`
	QueryData            string   `protobuf:"bytes,2,opt,name=queryData,proto3" json:"queryData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTemplate) Reset()         { *m = QueryTemplate{} }
func (m *QueryTemplate) String() string { return proto.CompactTextString(m) }
func (*QueryTemplate) ProtoMessage()    {}
func (*QueryTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_e02e853ebaa9a730, []int{4}
}
func (m *QueryTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTemplate.Unmarshal(m, b)
}
func (m *QueryTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTemplate.Marshal(b, m, deterministic)
}
func (dst *QueryTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTemplate.Merge(dst, src)
}
func (m *QueryTemplate) XXX_Size() int {
	return xxx_messageInfo_QueryTemplate.Size(m)
}
func (m *QueryTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTemplate proto.InternalMessageInfo

func (m *QueryTemplate) GetQueryTemplateName() string {
	if m != nil {
		return m.QueryTemplateName
	}
	return ""
}

func (m *QueryTemplate) GetQueryData() string {
	if m != nil {
		return m.QueryData
	}
	return ""
}

// 设置graphQL请求模板的返回
// reply of QueryTemplate
type ReplyQueryTemplate struct {
	Err                  string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyQueryTemplate) Reset()         { *m = ReplyQueryTemplate{} }
func (m *ReplyQueryTemplate) String() string { return proto.CompactTextString(m) }
func (*ReplyQueryTemplate) ProtoMessage()    {}
func (*ReplyQueryTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_e02e853ebaa9a730, []int{5}
}
func (m *ReplyQueryTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyQueryTemplate.Unmarshal(m, b)
}
func (m *ReplyQueryTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyQueryTemplate.Marshal(b, m, deterministic)
}
func (dst *ReplyQueryTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyQueryTemplate.Merge(dst, src)
}
func (m *ReplyQueryTemplate) XXX_Size() int {
	return xxx_messageInfo_ReplyQueryTemplate.Size(m)
}
func (m *ReplyQueryTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyQueryTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyQueryTemplate proto.InternalMessageInfo

func (m *ReplyQueryTemplate) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

// key-value的get请求
// get value in key-value
type GetValue struct {
	NameDB               string   `protobuf:"bytes,1,opt,name=nameDB,proto3" json:"nameDB,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetValue) Reset()         { *m = GetValue{} }
func (m *GetValue) String() string { return proto.CompactTextString(m) }
func (*GetValue) ProtoMessage()    {}
func (*GetValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_e02e853ebaa9a730, []int{6}
}
func (m *GetValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetValue.Unmarshal(m, b)
}
func (m *GetValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetValue.Marshal(b, m, deterministic)
}
func (dst *GetValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValue.Merge(dst, src)
}
func (m *GetValue) XXX_Size() int {
	return xxx_messageInfo_GetValue.Size(m)
}
func (m *GetValue) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValue.DiscardUnknown(m)
}

var xxx_messageInfo_GetValue proto.InternalMessageInfo

func (m *GetValue) GetNameDB() string {
	if m != nil {
		return m.NameDB
	}
	return ""
}

func (m *GetValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// key-value的get请求的返回
// reply of get value in key-value
type ReplyGetValue struct {
	Err                  string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyGetValue) Reset()         { *m = ReplyGetValue{} }
func (m *ReplyGetValue) String() string { return proto.CompactTextString(m) }
func (*ReplyGetValue) ProtoMessage()    {}
func (*ReplyGetValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_e02e853ebaa9a730, []int{7}
}
func (m *ReplyGetValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyGetValue.Unmarshal(m, b)
}
func (m *ReplyGetValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyGetValue.Marshal(b, m, deterministic)
}
func (dst *ReplyGetValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyGetValue.Merge(dst, src)
}
func (m *ReplyGetValue) XXX_Size() int {
	return xxx_messageInfo_ReplyGetValue.Size(m)
}
func (m *ReplyGetValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyGetValue.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyGetValue proto.InternalMessageInfo

func (m *ReplyGetValue) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *ReplyGetValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// key-value的set请求
// set value in key-value
type SetValue struct {
	NameDB               string   `protobuf:"bytes,1,opt,name=nameDB,proto3" json:"nameDB,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetValue) Reset()         { *m = SetValue{} }
func (m *SetValue) String() string { return proto.CompactTextString(m) }
func (*SetValue) ProtoMessage()    {}
func (*SetValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_e02e853ebaa9a730, []int{8}
}
func (m *SetValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetValue.Unmarshal(m, b)
}
func (m *SetValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetValue.Marshal(b, m, deterministic)
}
func (dst *SetValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetValue.Merge(dst, src)
}
func (m *SetValue) XXX_Size() int {
	return xxx_messageInfo_SetValue.Size(m)
}
func (m *SetValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SetValue.DiscardUnknown(m)
}

var xxx_messageInfo_SetValue proto.InternalMessageInfo

func (m *SetValue) GetNameDB() string {
	if m != nil {
		return m.NameDB
	}
	return ""
}

func (m *SetValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// key-value的set请求的返回
// reply of set value in key-value
type ReplySetValue struct {
	Err                  string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplySetValue) Reset()         { *m = ReplySetValue{} }
func (m *ReplySetValue) String() string { return proto.CompactTextString(m) }
func (*ReplySetValue) ProtoMessage()    {}
func (*ReplySetValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_e02e853ebaa9a730, []int{9}
}
func (m *ReplySetValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplySetValue.Unmarshal(m, b)
}
func (m *ReplySetValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplySetValue.Marshal(b, m, deterministic)
}
func (dst *ReplySetValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplySetValue.Merge(dst, src)
}
func (m *ReplySetValue) XXX_Size() int {
	return xxx_messageInfo_ReplySetValue.Size(m)
}
func (m *ReplySetValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplySetValue.DiscardUnknown(m)
}

var xxx_messageInfo_ReplySetValue proto.InternalMessageInfo

func (m *ReplySetValue) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*SnapshotMgr)(nil), "ankadbpb.SnapshotMgr")
	proto.RegisterType((*Snapshot)(nil), "ankadbpb.Snapshot")
	proto.RegisterType((*Query)(nil), "ankadbpb.Query")
	proto.RegisterType((*ReplyQuery)(nil), "ankadbpb.ReplyQuery")
	proto.RegisterType((*QueryTemplate)(nil), "ankadbpb.QueryTemplate")
	proto.RegisterType((*ReplyQueryTemplate)(nil), "ankadbpb.ReplyQueryTemplate")
	proto.RegisterType((*GetValue)(nil), "ankadbpb.GetValue")
	proto.RegisterType((*ReplyGetValue)(nil), "ankadbpb.ReplyGetValue")
	proto.RegisterType((*SetValue)(nil), "ankadbpb.SetValue")
	proto.RegisterType((*ReplySetValue)(nil), "ankadbpb.ReplySetValue")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnkaDBServClient is the client API for AnkaDBServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnkaDBServClient interface {
	// query in graphQL
	Query(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReplyQuery, error)
	// query in graphQL
	SetQueryTemplate(ctx context.Context, in *QueryTemplate, opts ...grpc.CallOption) (*ReplyQueryTemplate, error)
	// get
	Get(ctx context.Context, in *GetValue, opts ...grpc.CallOption) (*ReplyGetValue, error)
	// set
	Set(ctx context.Context, in *SetValue, opts ...grpc.CallOption) (*ReplySetValue, error)
}

type ankaDBServClient struct {
	cc *grpc.ClientConn
}

func NewAnkaDBServClient(cc *grpc.ClientConn) AnkaDBServClient {
	return &ankaDBServClient{cc}
}

func (c *ankaDBServClient) Query(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReplyQuery, error) {
	out := new(ReplyQuery)
	err := c.cc.Invoke(ctx, "/ankadbpb.AnkaDBServ/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ankaDBServClient) SetQueryTemplate(ctx context.Context, in *QueryTemplate, opts ...grpc.CallOption) (*ReplyQueryTemplate, error) {
	out := new(ReplyQueryTemplate)
	err := c.cc.Invoke(ctx, "/ankadbpb.AnkaDBServ/setQueryTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ankaDBServClient) Get(ctx context.Context, in *GetValue, opts ...grpc.CallOption) (*ReplyGetValue, error) {
	out := new(ReplyGetValue)
	err := c.cc.Invoke(ctx, "/ankadbpb.AnkaDBServ/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ankaDBServClient) Set(ctx context.Context, in *SetValue, opts ...grpc.CallOption) (*ReplySetValue, error) {
	out := new(ReplySetValue)
	err := c.cc.Invoke(ctx, "/ankadbpb.AnkaDBServ/set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnkaDBServServer is the server API for AnkaDBServ service.
type AnkaDBServServer interface {
	// query in graphQL
	Query(context.Context, *Query) (*ReplyQuery, error)
	// query in graphQL
	SetQueryTemplate(context.Context, *QueryTemplate) (*ReplyQueryTemplate, error)
	// get
	Get(context.Context, *GetValue) (*ReplyGetValue, error)
	// set
	Set(context.Context, *SetValue) (*ReplySetValue, error)
}

func RegisterAnkaDBServServer(s *grpc.Server, srv AnkaDBServServer) {
	s.RegisterService(&_AnkaDBServ_serviceDesc, srv)
}

func _AnkaDBServ_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkaDBServServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ankadbpb.AnkaDBServ/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkaDBServServer).Query(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnkaDBServ_SetQueryTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkaDBServServer).SetQueryTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ankadbpb.AnkaDBServ/SetQueryTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkaDBServServer).SetQueryTemplate(ctx, req.(*QueryTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnkaDBServ_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkaDBServServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ankadbpb.AnkaDBServ/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkaDBServServer).Get(ctx, req.(*GetValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnkaDBServ_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkaDBServServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ankadbpb.AnkaDBServ/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkaDBServServer).Set(ctx, req.(*SetValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnkaDBServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ankadbpb.AnkaDBServ",
	HandlerType: (*AnkaDBServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "query",
			Handler:    _AnkaDBServ_Query_Handler,
		},
		{
			MethodName: "setQueryTemplate",
			Handler:    _AnkaDBServ_SetQueryTemplate_Handler,
		},
		{
			MethodName: "get",
			Handler:    _AnkaDBServ_Get_Handler,
		},
		{
			MethodName: "set",
			Handler:    _AnkaDBServ_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ankadb.proto",
}

func init() { proto.RegisterFile("ankadb.proto", fileDescriptor_ankadb_e02e853ebaa9a730) }

var fileDescriptor_ankadb_e02e853ebaa9a730 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xdf, 0x8b, 0xd3, 0x40,
	0x10, 0xbe, 0x34, 0xf6, 0x4c, 0xc6, 0x2b, 0x9e, 0xc3, 0xe1, 0x85, 0x72, 0xc8, 0xb9, 0x88, 0xdc,
	0x83, 0x14, 0xd1, 0x43, 0x9f, 0x2d, 0x01, 0x51, 0x51, 0x68, 0x52, 0x7c, 0x11, 0x84, 0xad, 0x0e,
	0x55, 0xf2, 0xa3, 0x71, 0xb3, 0x2d, 0xe6, 0x2f, 0xf7, 0x55, 0x76, 0xb3, 0xdb, 0x6d, 0xd2, 0xf6,
	0xe1, 0xde, 0x66, 0xbe, 0x6f, 0xbe, 0xef, 0x9b, 0x1d, 0x12, 0x38, 0xe3, 0x65, 0xc6, 0x7f, 0x2e,
	0x26, 0x95, 0x58, 0xc9, 0x15, 0x06, 0x6d, 0x57, 0x2d, 0xd8, 0x0c, 0x1e, 0xa4, 0x25, 0xaf, 0xea,
	0x5f, 0x2b, 0xf9, 0x79, 0x29, 0xf0, 0x19, 0x8c, 0x0a, 0xfe, 0xd7, 0x22, 0x1f, 0xe2, 0xc8, 0xbb,
	0xf6, 0x6e, 0xfc, 0xa4, 0x0b, 0xe2, 0x15, 0x84, 0xb5, 0xe9, 0xea, 0x68, 0x70, 0xed, 0xdf, 0xf8,
	0x89, 0x03, 0xd8, 0x77, 0x08, 0xec, 0x2c, 0x3e, 0x01, 0xa8, 0xfb, 0x66, 0x3b, 0x08, 0x22, 0xdc,
	0xcb, 0xa8, 0x69, 0x4d, 0xc2, 0x44, 0xd7, 0x4a, 0xf3, 0x43, 0x10, 0x97, 0x34, 0xff, 0x5d, 0x50,
	0xe4, 0xb7, 0x1a, 0x87, 0xb0, 0x02, 0x86, 0xb3, 0x35, 0x89, 0x46, 0xad, 0xf1, 0x47, 0x15, 0x31,
	0x97, 0x5c, 0x7b, 0x87, 0x89, 0x03, 0x30, 0x82, 0xfb, 0x1b, 0x2e, 0x34, 0x37, 0xd0, 0x9c, 0x6d,
	0xf1, 0x05, 0x3c, 0xd2, 0x63, 0x73, 0x2a, 0xaa, 0x9c, 0x4b, 0xfa, 0xc2, 0x4d, 0x4e, 0x98, 0xec,
	0x13, 0xec, 0x0d, 0x40, 0x42, 0x55, 0xde, 0xb4, 0x99, 0xe7, 0xe0, 0x93, 0x10, 0x26, 0x4d, 0x95,
	0xf8, 0x18, 0x4e, 0x05, 0xd5, 0xeb, 0x5c, 0x9a, 0x18, 0xd3, 0xb1, 0x6f, 0x30, 0x9a, 0xed, 0x9a,
	0x1d, 0x8e, 0xf5, 0x8e, 0xc4, 0x76, 0x1f, 0x37, 0xe8, 0x3d, 0x8e, 0x3d, 0x07, 0x74, 0x4b, 0x6d,
	0x13, 0xf6, 0x96, 0x63, 0xb7, 0x10, 0xbc, 0x27, 0xf9, 0x95, 0xe7, 0x6b, 0x52, 0x8b, 0x96, 0xbc,
	0xa0, 0x78, 0x6a, 0x06, 0x4c, 0xa7, 0x54, 0x19, 0x35, 0x26, 0x43, 0x95, 0xec, 0x2d, 0x8c, 0xb4,
	0xfb, 0x56, 0xba, 0xff, 0xea, 0x0b, 0x18, 0x6e, 0x14, 0xa5, 0x65, 0x67, 0x49, 0xdb, 0xb0, 0x8f,
	0x10, 0xa4, 0x77, 0x8e, 0x73, 0x5e, 0xfe, 0xae, 0xd7, 0x53, 0xb3, 0x44, 0x7a, 0x74, 0x89, 0x57,
	0xff, 0x3c, 0x80, 0x77, 0x65, 0xc6, 0xe3, 0x69, 0x4a, 0x62, 0x83, 0x2f, 0x61, 0xa8, 0x2f, 0x84,
	0x0f, 0x27, 0xf6, 0xfb, 0x9e, 0xe8, 0x03, 0x8d, 0x2f, 0x1c, 0xe0, 0xce, 0xc6, 0x4e, 0xf0, 0x13,
	0x9c, 0xd7, 0x24, 0xbb, 0x47, 0xbc, 0xec, 0x89, 0x2d, 0x31, 0xbe, 0x3a, 0x64, 0x62, 0x59, 0x76,
	0x82, 0xb7, 0xe0, 0x2f, 0x49, 0x22, 0xba, 0x31, 0x7b, 0xbf, 0xf1, 0x65, 0x4f, 0x6a, 0x89, 0x56,
	0x55, 0x77, 0x55, 0xe9, 0x31, 0x55, 0xba, 0x55, 0x2d, 0x4e, 0xf5, 0x7f, 0xfc, 0xfa, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x13, 0xac, 0x74, 0xcb, 0xd7, 0x03, 0x00, 0x00,
}
