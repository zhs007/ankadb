// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ankadb.proto

package ankadbpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CODE int32

const (
	CODE_OK                  CODE = 0
	CODE_VAR_PARSE_ERR       CODE = 1
	CODE_LOGIC_ONQUERY_ERR   CODE = 2
	CODE_CTX_CURDB_ERR       CODE = 3
	CODE_PROTOBUF_ENCODE_ERR CODE = 4
	CODE_DB_PUT_ERR          CODE = 5
	CODE_CLIENT_NO_CONN      CODE = 10000
	CODE_INVALID_CODE        CODE = 20000
)

var CODE_name = map[int32]string{
	0:     "OK",
	1:     "VAR_PARSE_ERR",
	2:     "LOGIC_ONQUERY_ERR",
	3:     "CTX_CURDB_ERR",
	4:     "PROTOBUF_ENCODE_ERR",
	5:     "DB_PUT_ERR",
	10000: "CLIENT_NO_CONN",
	20000: "INVALID_CODE",
}
var CODE_value = map[string]int32{
	"OK":                  0,
	"VAR_PARSE_ERR":       1,
	"LOGIC_ONQUERY_ERR":   2,
	"CTX_CURDB_ERR":       3,
	"PROTOBUF_ENCODE_ERR": 4,
	"DB_PUT_ERR":          5,
	"CLIENT_NO_CONN":      10000,
	"INVALID_CODE":        20000,
}

func (x CODE) String() string {
	return proto.EnumName(CODE_name, int32(x))
}
func (CODE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_ab3a863929256233, []int{0}
}

type Query struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	QueryData            string   `protobuf:"bytes,2,opt,name=queryData,proto3" json:"queryData,omitempty"`
	VarData              string   `protobuf:"bytes,3,opt,name=varData,proto3" json:"varData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_ab3a863929256233, []int{0}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (dst *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(dst, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Query) GetQueryData() string {
	if m != nil {
		return m.QueryData
	}
	return ""
}

func (m *Query) GetVarData() string {
	if m != nil {
		return m.VarData
	}
	return ""
}

type ReplyQuery struct {
	Code                 CODE     `protobuf:"varint,1,opt,name=code,proto3,enum=ankadbpb.CODE" json:"code,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Result               string   `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyQuery) Reset()         { *m = ReplyQuery{} }
func (m *ReplyQuery) String() string { return proto.CompactTextString(m) }
func (*ReplyQuery) ProtoMessage()    {}
func (*ReplyQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_ab3a863929256233, []int{1}
}
func (m *ReplyQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyQuery.Unmarshal(m, b)
}
func (m *ReplyQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyQuery.Marshal(b, m, deterministic)
}
func (dst *ReplyQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyQuery.Merge(dst, src)
}
func (m *ReplyQuery) XXX_Size() int {
	return xxx_messageInfo_ReplyQuery.Size(m)
}
func (m *ReplyQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyQuery proto.InternalMessageInfo

func (m *ReplyQuery) GetCode() CODE {
	if m != nil {
		return m.Code
	}
	return CODE_OK
}

func (m *ReplyQuery) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *ReplyQuery) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*Query)(nil), "ankadbpb.Query")
	proto.RegisterType((*ReplyQuery)(nil), "ankadbpb.ReplyQuery")
	proto.RegisterEnum("ankadbpb.CODE", CODE_name, CODE_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnkaDBServClient is the client API for AnkaDBServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnkaDBServClient interface {
	Query(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReplyQuery, error)
}

type ankaDBServClient struct {
	cc *grpc.ClientConn
}

func NewAnkaDBServClient(cc *grpc.ClientConn) AnkaDBServClient {
	return &ankaDBServClient{cc}
}

func (c *ankaDBServClient) Query(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReplyQuery, error) {
	out := new(ReplyQuery)
	err := c.cc.Invoke(ctx, "/ankadbpb.AnkaDBServ/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnkaDBServServer is the server API for AnkaDBServ service.
type AnkaDBServServer interface {
	Query(context.Context, *Query) (*ReplyQuery, error)
}

func RegisterAnkaDBServServer(s *grpc.Server, srv AnkaDBServServer) {
	s.RegisterService(&_AnkaDBServ_serviceDesc, srv)
}

func _AnkaDBServ_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkaDBServServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ankadbpb.AnkaDBServ/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkaDBServServer).Query(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnkaDBServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ankadbpb.AnkaDBServ",
	HandlerType: (*AnkaDBServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "query",
			Handler:    _AnkaDBServ_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ankadb.proto",
}

func init() { proto.RegisterFile("ankadb.proto", fileDescriptor_ankadb_ab3a863929256233) }

var fileDescriptor_ankadb_ab3a863929256233 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xcd, 0x4e, 0xfa, 0x40,
	0x14, 0xc5, 0x29, 0x14, 0xfe, 0x7f, 0x6e, 0xb0, 0x96, 0x8b, 0x1f, 0xc4, 0xb8, 0x30, 0x5d, 0x19,
	0x17, 0xc4, 0xe0, 0xde, 0xa4, 0x5f, 0x9a, 0x46, 0x32, 0x03, 0x43, 0x4b, 0xd4, 0xcd, 0x64, 0x90,
	0xae, 0x40, 0xc0, 0x11, 0x48, 0x78, 0x0b, 0x1f, 0x40, 0x13, 0x1f, 0xd5, 0xcc, 0x05, 0xd2, 0xdd,
	0x3d, 0xe7, 0xd7, 0x7b, 0x6e, 0x7a, 0x06, 0x1a, 0x6a, 0x3e, 0x55, 0x93, 0x71, 0x67, 0xa9, 0x17,
	0xab, 0x05, 0xfe, 0xdf, 0xa9, 0xe5, 0xd8, 0x1b, 0x42, 0x75, 0xb0, 0xce, 0xf5, 0x16, 0x11, 0xec,
	0xb9, 0x7a, 0xcf, 0xdb, 0xd6, 0x95, 0x75, 0x5d, 0x17, 0x34, 0xe3, 0x25, 0xd4, 0x3f, 0x0c, 0x8c,
	0xd4, 0x4a, 0xb5, 0xcb, 0x04, 0x0a, 0x03, 0xdb, 0xf0, 0x6f, 0xa3, 0x34, 0xb1, 0x0a, 0xb1, 0x83,
	0xf4, 0x5e, 0x01, 0x44, 0xbe, 0x9c, 0x6d, 0x77, 0xc9, 0x1e, 0xd8, 0x6f, 0x8b, 0xc9, 0x2e, 0xd9,
	0xe9, 0x3a, 0x9d, 0xc3, 0xed, 0x4e, 0xc8, 0xa3, 0x58, 0x10, 0x43, 0x17, 0x2a, 0xb9, 0xd6, 0xfb,
	0x1b, 0x66, 0xc4, 0x33, 0xa8, 0xe9, 0xfc, 0x73, 0x3d, 0x5b, 0xed, 0xc3, 0xf7, 0xea, 0xe6, 0xc7,
	0x02, 0xdb, 0x2c, 0x62, 0x0d, 0xca, 0xfc, 0xc9, 0x2d, 0x61, 0x13, 0x8e, 0x46, 0xbe, 0x90, 0x7d,
	0x5f, 0x0c, 0x63, 0x19, 0x0b, 0xe1, 0x5a, 0x78, 0x0a, 0xcd, 0x1e, 0x7f, 0x4c, 0x42, 0xc9, 0xd9,
	0x20, 0x8b, 0xc5, 0x0b, 0xd9, 0x65, 0xf3, 0x65, 0x98, 0x3e, 0xcb, 0x30, 0x13, 0x51, 0x40, 0x56,
	0x05, 0xcf, 0xa1, 0xd5, 0x17, 0x3c, 0xe5, 0x41, 0xf6, 0x20, 0x63, 0x66, 0x72, 0x09, 0xd8, 0xe8,
	0x00, 0x44, 0x81, 0xec, 0x67, 0x29, 0xe9, 0x2a, 0xb6, 0xc0, 0x09, 0x7b, 0x49, 0xcc, 0x52, 0xc9,
	0xb8, 0x0c, 0x39, 0x63, 0xee, 0x17, 0x43, 0x84, 0x46, 0xc2, 0x46, 0x7e, 0x2f, 0x89, 0xa4, 0x59,
	0x75, 0x7f, 0xbf, 0xad, 0xee, 0x3d, 0x80, 0x3f, 0x9f, 0xaa, 0x28, 0x18, 0xe6, 0x7a, 0x83, 0xb7,
	0x50, 0xa5, 0xc2, 0xf0, 0xb8, 0xf8, 0x6d, 0x6a, 0xe5, 0xe2, 0xa4, 0x30, 0x8a, 0xae, 0xbc, 0xd2,
	0xb8, 0x46, 0x2f, 0x74, 0xf7, 0x17, 0x00, 0x00, 0xff, 0xff, 0x54, 0x45, 0xa3, 0x1a, 0xb1, 0x01,
	0x00, 0x00,
}
