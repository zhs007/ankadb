// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ankadb.proto

package ankadbpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SnapshotMgr struct {
	MaxSnapshotID        int64    `protobuf:"varint,1,opt,name=maxSnapshotID,proto3" json:"maxSnapshotID,omitempty"`
	Snapshots            []int64  `protobuf:"varint,2,rep,packed,name=snapshots,proto3" json:"snapshots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotMgr) Reset()         { *m = SnapshotMgr{} }
func (m *SnapshotMgr) String() string { return proto.CompactTextString(m) }
func (*SnapshotMgr) ProtoMessage()    {}
func (*SnapshotMgr) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_56c3d63b69e91e29, []int{0}
}
func (m *SnapshotMgr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotMgr.Unmarshal(m, b)
}
func (m *SnapshotMgr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotMgr.Marshal(b, m, deterministic)
}
func (dst *SnapshotMgr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotMgr.Merge(dst, src)
}
func (m *SnapshotMgr) XXX_Size() int {
	return xxx_messageInfo_SnapshotMgr.Size(m)
}
func (m *SnapshotMgr) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotMgr.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotMgr proto.InternalMessageInfo

func (m *SnapshotMgr) GetMaxSnapshotID() int64 {
	if m != nil {
		return m.MaxSnapshotID
	}
	return 0
}

func (m *SnapshotMgr) GetSnapshots() []int64 {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

type Snapshot struct {
	SnapshotID           int64    `protobuf:"varint,1,opt,name=snapshotID,proto3" json:"snapshotID,omitempty"`
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	CreateTime           int64    `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_56c3d63b69e91e29, []int{1}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Snapshot.Unmarshal(m, b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
}
func (dst *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(dst, src)
}
func (m *Snapshot) XXX_Size() int {
	return xxx_messageInfo_Snapshot.Size(m)
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetSnapshotID() int64 {
	if m != nil {
		return m.SnapshotID
	}
	return 0
}

func (m *Snapshot) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *Snapshot) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

type Query struct {
	QueryData            string   `protobuf:"bytes,1,opt,name=queryData,proto3" json:"queryData,omitempty"`
	VarData              string   `protobuf:"bytes,2,opt,name=varData,proto3" json:"varData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_56c3d63b69e91e29, []int{2}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (dst *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(dst, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetQueryData() string {
	if m != nil {
		return m.QueryData
	}
	return ""
}

func (m *Query) GetVarData() string {
	if m != nil {
		return m.VarData
	}
	return ""
}

type ReplyQuery struct {
	Err                  string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyQuery) Reset()         { *m = ReplyQuery{} }
func (m *ReplyQuery) String() string { return proto.CompactTextString(m) }
func (*ReplyQuery) ProtoMessage()    {}
func (*ReplyQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_ankadb_56c3d63b69e91e29, []int{3}
}
func (m *ReplyQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyQuery.Unmarshal(m, b)
}
func (m *ReplyQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyQuery.Marshal(b, m, deterministic)
}
func (dst *ReplyQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyQuery.Merge(dst, src)
}
func (m *ReplyQuery) XXX_Size() int {
	return xxx_messageInfo_ReplyQuery.Size(m)
}
func (m *ReplyQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyQuery proto.InternalMessageInfo

func (m *ReplyQuery) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *ReplyQuery) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*SnapshotMgr)(nil), "ankadbpb.SnapshotMgr")
	proto.RegisterType((*Snapshot)(nil), "ankadbpb.Snapshot")
	proto.RegisterType((*Query)(nil), "ankadbpb.Query")
	proto.RegisterType((*ReplyQuery)(nil), "ankadbpb.ReplyQuery")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnkaDBServClient is the client API for AnkaDBServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnkaDBServClient interface {
	Query(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReplyQuery, error)
	QueryStream(ctx context.Context, in *Query, opts ...grpc.CallOption) (AnkaDBServ_QueryStreamClient, error)
}

type ankaDBServClient struct {
	cc *grpc.ClientConn
}

func NewAnkaDBServClient(cc *grpc.ClientConn) AnkaDBServClient {
	return &ankaDBServClient{cc}
}

func (c *ankaDBServClient) Query(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReplyQuery, error) {
	out := new(ReplyQuery)
	err := c.cc.Invoke(ctx, "/ankadbpb.AnkaDBServ/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ankaDBServClient) QueryStream(ctx context.Context, in *Query, opts ...grpc.CallOption) (AnkaDBServ_QueryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnkaDBServ_serviceDesc.Streams[0], "/ankadbpb.AnkaDBServ/queryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ankaDBServQueryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnkaDBServ_QueryStreamClient interface {
	Recv() (*ReplyQuery, error)
	grpc.ClientStream
}

type ankaDBServQueryStreamClient struct {
	grpc.ClientStream
}

func (x *ankaDBServQueryStreamClient) Recv() (*ReplyQuery, error) {
	m := new(ReplyQuery)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnkaDBServServer is the server API for AnkaDBServ service.
type AnkaDBServServer interface {
	Query(context.Context, *Query) (*ReplyQuery, error)
	QueryStream(*Query, AnkaDBServ_QueryStreamServer) error
}

func RegisterAnkaDBServServer(s *grpc.Server, srv AnkaDBServServer) {
	s.RegisterService(&_AnkaDBServ_serviceDesc, srv)
}

func _AnkaDBServ_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnkaDBServServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ankadbpb.AnkaDBServ/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnkaDBServServer).Query(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnkaDBServ_QueryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnkaDBServServer).QueryStream(m, &ankaDBServQueryStreamServer{stream})
}

type AnkaDBServ_QueryStreamServer interface {
	Send(*ReplyQuery) error
	grpc.ServerStream
}

type ankaDBServQueryStreamServer struct {
	grpc.ServerStream
}

func (x *ankaDBServQueryStreamServer) Send(m *ReplyQuery) error {
	return x.ServerStream.SendMsg(m)
}

var _AnkaDBServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ankadbpb.AnkaDBServ",
	HandlerType: (*AnkaDBServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "query",
			Handler:    _AnkaDBServ_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "queryStream",
			Handler:       _AnkaDBServ_QueryStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ankadb.proto",
}

func init() { proto.RegisterFile("ankadb.proto", fileDescriptor_ankadb_56c3d63b69e91e29) }

var fileDescriptor_ankadb_56c3d63b69e91e29 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xbf, 0x69, 0xbe, 0xad, 0xcd, 0x54, 0x51, 0x06, 0x91, 0x20, 0x22, 0x25, 0x78, 0xe8,
	0x29, 0x14, 0x05, 0xf1, 0x26, 0x4a, 0x2e, 0x1e, 0x3c, 0x74, 0xe3, 0x59, 0x98, 0xe8, 0xa0, 0x92,
	0xe6, 0x87, 0xb3, 0xdb, 0xd2, 0xfc, 0xf7, 0x92, 0x4d, 0xc2, 0xaa, 0x27, 0x6f, 0xef, 0x7d, 0x66,
	0xdf, 0x9b, 0x65, 0x17, 0xf6, 0xa9, 0xcc, 0xe9, 0x35, 0x8b, 0x6b, 0xa9, 0x4c, 0x85, 0xd3, 0xce,
	0xd5, 0x59, 0xb4, 0x82, 0x59, 0x5a, 0x52, 0xad, 0xdf, 0x2b, 0xf3, 0xf8, 0x26, 0x78, 0x01, 0x07,
	0x05, 0xed, 0x06, 0xf2, 0x90, 0x84, 0xde, 0xdc, 0x5b, 0xf8, 0xea, 0x27, 0xc4, 0x33, 0x08, 0x74,
	0xef, 0x74, 0x38, 0x9a, 0xfb, 0x0b, 0x5f, 0x39, 0x10, 0x3d, 0xc3, 0x74, 0x38, 0x8b, 0xe7, 0x00,
	0xfa, 0x77, 0xd9, 0x37, 0x82, 0x08, 0xff, 0x73, 0x6e, 0xba, 0x92, 0x40, 0x59, 0xdd, 0x66, 0x5e,
	0x84, 0xc9, 0xf0, 0xd3, 0x47, 0xc1, 0xa1, 0xdf, 0x65, 0x1c, 0x89, 0x6e, 0x61, 0xbc, 0xda, 0xb0,
	0x34, 0xed, 0x35, 0x3e, 0x5b, 0x91, 0x90, 0x21, 0xdb, 0x1d, 0x28, 0x07, 0x30, 0x84, 0xbd, 0x2d,
	0x89, 0x9d, 0x8d, 0xec, 0x6c, 0xb0, 0xd1, 0x35, 0x80, 0xe2, 0x7a, 0xdd, 0x74, 0x2d, 0x47, 0xe0,
	0xb3, 0x48, 0x9f, 0x6f, 0x25, 0x9e, 0xc0, 0x44, 0x58, 0x6f, 0xd6, 0xa6, 0x0f, 0xf6, 0xee, 0x72,
	0x07, 0x70, 0x57, 0xe6, 0x94, 0xdc, 0xa7, 0x2c, 0x5b, 0x5c, 0xc2, 0xd8, 0x2e, 0xc3, 0xc3, 0x78,
	0x78, 0xcd, 0xd8, 0x36, 0x9e, 0x1e, 0x3b, 0xe0, 0xf6, 0x44, 0xff, 0xf0, 0x06, 0x66, 0x36, 0x91,
	0x1a, 0x61, 0x2a, 0xfe, 0x9c, 0x5b, 0x7a, 0xd9, 0xc4, 0x7e, 0xdb, 0xd5, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe4, 0x85, 0x30, 0x43, 0xc6, 0x01, 0x00, 0x00,
}
